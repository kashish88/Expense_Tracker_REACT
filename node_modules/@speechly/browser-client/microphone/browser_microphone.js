"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const browser_audio_processor_1 = require("./browser_audio_processor");
class BrowserMicrophone {
    constructor(sampleRate, audioProcessor) {
        this.onAudioCb = () => { };
        this.handleAudio = (audioBuffer) => {
            this.onAudioCb(audioBuffer);
        };
        this.audioProcessor = audioProcessor !== null && audioProcessor !== void 0 ? audioProcessor : new browser_audio_processor_1.BrowserAudioProcessor(sampleRate, this.handleAudio);
    }
    onAudio(cb) {
        this.onAudioCb = cb;
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.audioProcessor.initialize();
            this.mute();
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            this.mute();
            return this.audioProcessor.close();
        });
    }
    mute() {
        this.audioProcessor.mute();
    }
    unmute() {
        this.audioProcessor.unmute();
    }
}
exports.BrowserMicrophone = BrowserMicrophone;
//# sourceMappingURL=browser_microphone.js.map