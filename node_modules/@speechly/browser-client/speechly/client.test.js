"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("./client");
const types_1 = require("./types");
let microphone;
let apiClient;
let storage;
let client;
let stateChangeCb;
describe('Speechly Client', function () {
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            microphone = {
                onAudio: jest.fn(),
                initialize: jest.fn(),
                close: jest.fn(),
                mute: jest.fn(() => Date.now()),
                unmute: jest.fn(() => Date.now()),
            };
            apiClient = {
                onResponse: jest.fn(),
                onClose: jest.fn(),
                initialize: jest.fn(),
                close: jest.fn(),
                startContext: jest.fn(),
                stopContext: jest.fn(() => __awaiter(this, void 0, void 0, function* () { return new Promise(resolve => resolve(Date.now().toString())); })),
                sendAudio: jest.fn(),
            };
            storage = {
                initialize: jest.fn(),
                close: jest.fn(),
                get: jest.fn(),
                set: jest.fn(),
                getOrSet: jest.fn(),
            };
            client = new client_1.Client({
                appId: 'xxxx-xxxx-xxxx',
                language: 'en-US',
                microphone,
                apiClient,
                storage,
                debug: true,
            });
            stateChangeCb = jest.fn();
            client.onStateChange(stateChangeCb);
            yield client.initialize();
        });
    });
    it('set state Connecting and Connected during initialization', function () {
        return __awaiter(this, void 0, void 0, function* () {
            expect(stateChangeCb.mock.calls.length).toBe(2);
            expect(stateChangeCb.mock.calls[0][0]).toBe(types_1.ClientState.Connecting);
            expect(stateChangeCb.mock.calls[1][0]).toBe(types_1.ClientState.Connected);
        });
    });
    it('delay stop context after call for 250 ms', function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield client.startContext();
            expect(apiClient.startContext.mock.calls.length).toBe(1);
            expect(stateChangeCb.mock.calls[2][0]).toBe(types_1.ClientState.Starting);
            expect(stateChangeCb.mock.calls[3][0]).toBe(types_1.ClientState.Recording);
            const callStopTime = Date.now();
            const stopPromise = client.stopContext();
            const realStopTime = yield stopPromise;
            expect(apiClient.stopContext.mock.calls.length).toBe(1);
            expect(parseInt(realStopTime) - callStopTime).toBeGreaterThanOrEqual(250);
        });
    });
    it('cancel delay stop context on start context', function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield client.startContext();
            const callStopTime = Date.now();
            const stopPromise = client.stopContext();
            yield client.startContext();
            const realStopTime = yield stopPromise;
            expect(apiClient.stopContext.mock.calls.length).toBe(1);
            expect(parseInt(realStopTime) - callStopTime).toBeLessThan(250);
        });
    });
});
//# sourceMappingURL=client.test.js.map