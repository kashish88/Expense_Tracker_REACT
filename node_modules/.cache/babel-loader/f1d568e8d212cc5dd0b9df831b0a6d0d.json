{"ast":null,"code":"var _jsxFileName = \"/Users/kashish/Documents/Expense_Tracker_REACT/src/components/Main/Form/Form.jsx\";\nimport React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { TextField, Grid, Typography, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport { ExpenseTrackerContext } from '../../../context/context';\nimport { v4 as uuidv4 } from 'uuid';\nimport formatDate from '../../../utils/formatDate';\nimport useStyles from './styles';\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport { useSpeechContext } from '@speechly/react-client';\nimport CustomizedSnackbar from '../../Snackbar/Snackbar';\nconst initialState = {\n  amount: '',\n  category: '',\n  type: 'Income',\n  date: formatDate(Date())\n};\n\nconst Form = () => {\n  const classes = useStyles();\n  const [formData, setFormData] = useState(initialState);\n  const {\n    addTransaction\n  } = useContext(ExpenseTrackerContext);\n  const {\n    segment\n  } = useSpeechContext();\n  const [open, setOpen] = useState(false);\n  const [budgets, setBudgets] = useState({\n    // Initialize budgets for each category to zero\n    // Add more categories as needed\n    Food: 0,\n    Rent: 0 // ... other categories\n\n  });\n  const createTransaction = useCallback(() => {\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n    const budgetLimit = budgets[formData.category];\n    const transactionAmount = Number(formData.amount);\n\n    if (budgetLimit > 0 && transactionAmount > budgetLimit) {\n      // Show a notification or visual indicator that the budget limit is exceeded\n      console.log('Budget limit exceeded!');\n      return;\n    }\n\n    const transaction = { ...formData,\n      amount: Number(formData.amount),\n      id: uuidv4()\n    };\n    setOpen(true);\n    addTransaction(transaction);\n    setFormData(prevFormData => ({ ...prevFormData,\n      ...initialState\n    }));\n  }, [addTransaction, formData]);\n  useEffect(() => {\n    // console.log(\"Hello\");\n    if (segment) {\n      if (segment.intent.intent === 'add_expense') {\n        setFormData({ ...formData,\n          type: 'Expense'\n        });\n      } else if (segment.intent.intent === 'add_income') {\n        setFormData({ ...formData,\n          type: 'Income'\n        });\n      } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\n        return createTransaction();\n      } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\n        return setFormData(initialState);\n      }\n\n      segment.entities.forEach(e => {\n        //  console.log(e.value);\n        const category = `${e.value.charAt(0)}${e.value.slice(1).toLowerCase()}`;\n\n        switch (e.type) {\n          case 'amount':\n            setFormData({ ...formData,\n              amount: e.value\n            });\n            break;\n\n          case 'category':\n            if (incomeCategories.map(ic => ic.type).includes(category)) {\n              setFormData({ ...formData,\n                type: 'Income',\n                category\n              });\n            } else if (expenseCategories.map(ic => ic.type).includes(category)) {\n              setFormData({ ...formData,\n                type: 'Expense',\n                category\n              });\n            }\n\n            break;\n\n          case 'date':\n            setFormData({ ...formData,\n              date: e.value\n            });\n            break;\n\n          default:\n            break;\n        }\n      });\n\n      if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\n        createTransaction();\n      }\n    }\n  }, [segment, createTransaction, formData]);\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CustomizedSnackbar, {\n    open: open,\n    setOpen: setOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    variant: \"subtitle2\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, segment && /*#__PURE__*/React.createElement(React.Fragment, null, segment.words.map(w => w.value).join(\" \")))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, \"Type\"), /*#__PURE__*/React.createElement(Select, {\n    value: formData.type,\n    onChange: e => setFormData({ ...formData,\n      type: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Income\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }\n  }, \"Income\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Expense\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }\n  }, \"Expense\")))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  }, \"Category\"), /*#__PURE__*/React.createElement(Select, {\n    value: formData.category,\n    onChange: e => setFormData({ ...formData,\n      category: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }, selectedCategories.map(c => /*#__PURE__*/React.createElement(MenuItem, {\n    key: c.type,\n    value: c.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 56\n    }\n  }, c.type))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    type: \"number\",\n    label: \"Amount\",\n    fullWidth: true,\n    value: formData.amount,\n    onChange: e => setFormData({ ...formData,\n      amount: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    type: \"date\",\n    label: \"Date\",\n    fullWidth: true,\n    value: formData.date,\n    onChange: e => setFormData({ ...formData,\n      date: formatDate(e.target.value)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  })), formData.type === 'Expense' && /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    type: \"number\",\n    label: \"Budget\",\n    fullWidth: true,\n    value: budgets[formData.category],\n    onChange: e => setBudgets({ ...budgets,\n      [formData.category]: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: classes.button,\n    variant: \"outlined\",\n    color: \"primary\",\n    fullWidth: true,\n    onClick: createTransaction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, \"Create\"));\n};\n\nexport default Form;","map":{"version":3,"sources":["/Users/kashish/Documents/Expense_Tracker_REACT/src/components/Main/Form/Form.jsx"],"names":["React","useState","useEffect","useContext","useCallback","TextField","Grid","Typography","Button","FormControl","InputLabel","Select","MenuItem","ExpenseTrackerContext","v4","uuidv4","formatDate","useStyles","incomeCategories","expenseCategories","useSpeechContext","CustomizedSnackbar","initialState","amount","category","type","date","Date","Form","classes","formData","setFormData","addTransaction","segment","open","setOpen","budgets","setBudgets","Food","Rent","createTransaction","Number","isNaN","includes","budgetLimit","transactionAmount","console","log","transaction","id","prevFormData","intent","isFinal","entities","forEach","e","value","charAt","slice","toLowerCase","map","ic","selectedCategories","words","w","join","target","c","button"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,WAAjD,QAAoE,OAApE;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,UAA1B,EAAsCC,MAAtC,EAA8CC,WAA9C,EAA2DC,UAA3D,EAAuEC,MAAvE,EAA+EC,QAA/E,QAA+F,mBAA/F;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,SAAP,MAAsB,UAAtB;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,+BAApD;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,QAAQ,EAAE,EAFO;AAGjBC,EAAAA,IAAI,EAAE,QAHW;AAIjBC,EAAAA,IAAI,EAAEV,UAAU,CAACW,IAAI,EAAL;AAJC,CAArB;;AAOA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAMC,OAAO,GAAGZ,SAAS,EAAzB;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0B9B,QAAQ,CAACqB,YAAD,CAAxC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAqB7B,UAAU,CAACU,qBAAD,CAArC;AACA,QAAM;AAAEoB,IAAAA;AAAF,MAAcb,gBAAgB,EAApC;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBlC,QAAQ,CAAC,KAAD,CAAhC;AAEA,QAAM,CAACmC,OAAD,EAAUC,UAAV,IAAwBpC,QAAQ,CAAC;AACnC;AACA;AACAqC,IAAAA,IAAI,EAAE,CAH6B;AAInCC,IAAAA,IAAI,EAAE,CAJ6B,CAKnC;;AALmC,GAAD,CAAtC;AASA,QAAMC,iBAAiB,GAAGpC,WAAW,CAAC,MAAM;AACxC,QAAIqC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACX,QAAQ,CAACP,MAAV,CAAnB,KAAyC,CAACO,QAAQ,CAACJ,IAAT,CAAciB,QAAd,CAAuB,GAAvB,CAA9C,EAA2E;AAC3E,UAAMC,WAAW,GAAGR,OAAO,CAACN,QAAQ,CAACN,QAAV,CAA3B;AACA,UAAMqB,iBAAiB,GAAGJ,MAAM,CAACX,QAAQ,CAACP,MAAV,CAAhC;;AAEA,QAAIqB,WAAW,GAAG,CAAd,IAAmBC,iBAAiB,GAAGD,WAA3C,EAAwD;AACpD;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA;AACH;;AAED,UAAMC,WAAW,GAAG,EAAE,GAAGlB,QAAL;AAAeP,MAAAA,MAAM,EAAEkB,MAAM,CAACX,QAAQ,CAACP,MAAV,CAA7B;AAAgD0B,MAAAA,EAAE,EAAElC,MAAM;AAA1D,KAApB;AAEAoB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAH,IAAAA,cAAc,CAACgB,WAAD,CAAd;AACAjB,IAAAA,WAAW,CAAEmB,YAAD,KAAmB,EAAE,GAAGA,YAAL;AAAmB,SAAG5B;AAAtB,KAAnB,CAAD,CAAX;AACH,GAhBoC,EAgBlC,CAACU,cAAD,EAAiBF,QAAjB,CAhBkC,CAArC;AAiBA5B,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAI+B,OAAJ,EAAa;AACT,UAAIA,OAAO,CAACkB,MAAR,CAAeA,MAAf,KAA0B,aAA9B,EAA6C;AACzCpB,QAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeL,UAAAA,IAAI,EAAE;AAArB,SAAD,CAAX;AACH,OAFD,MAGK,IAAIQ,OAAO,CAACkB,MAAR,CAAeA,MAAf,KAA0B,YAA9B,EAA4C;AAC7CpB,QAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeL,UAAAA,IAAI,EAAE;AAArB,SAAD,CAAX;AACH,OAFI,MAEE,IAAIQ,OAAO,CAACmB,OAAR,IAAmBnB,OAAO,CAACkB,MAAR,CAAeA,MAAf,KAA0B,oBAAjD,EAAuE;AAC1E,eAAOX,iBAAiB,EAAxB;AACH,OAFM,MAEA,IAAIP,OAAO,CAACmB,OAAR,IAAmBnB,OAAO,CAACkB,MAAR,CAAeA,MAAf,KAA0B,oBAAjD,EAAuE;AAC1E,eAAOpB,WAAW,CAACT,YAAD,CAAlB;AACH;;AACDW,MAAAA,OAAO,CAACoB,QAAR,CAAiBC,OAAjB,CAA0BC,CAAD,IAAO;AAC5B;AACA,cAAM/B,QAAQ,GAAI,GAAE+B,CAAC,CAACC,KAAF,CAAQC,MAAR,CAAe,CAAf,CAAkB,GAAEF,CAAC,CAACC,KAAF,CAAQE,KAAR,CAAc,CAAd,EAAiBC,WAAjB,EAA+B,EAAvE;;AACA,gBAAQJ,CAAC,CAAC9B,IAAV;AACI,eAAK,QAAL;AACIM,YAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeP,cAAAA,MAAM,EAAEgC,CAAC,CAACC;AAAzB,aAAD,CAAX;AACA;;AACJ,eAAK,UAAL;AACI,gBAAItC,gBAAgB,CAAC0C,GAAjB,CAAsBC,EAAD,IAAQA,EAAE,CAACpC,IAAhC,EAAsCkB,QAAtC,CAA+CnB,QAA/C,CAAJ,EAA8D;AAC1DO,cAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeL,gBAAAA,IAAI,EAAE,QAArB;AAA+BD,gBAAAA;AAA/B,eAAD,CAAX;AACH,aAFD,MAEO,IAAIL,iBAAiB,CAACyC,GAAlB,CAAuBC,EAAD,IAAQA,EAAE,CAACpC,IAAjC,EAAuCkB,QAAvC,CAAgDnB,QAAhD,CAAJ,EAA+D;AAClEO,cAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeL,gBAAAA,IAAI,EAAE,SAArB;AAAgCD,gBAAAA;AAAhC,eAAD,CAAX;AACH;;AACD;;AACJ,eAAK,MAAL;AACIO,YAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeJ,cAAAA,IAAI,EAAE6B,CAAC,CAACC;AAAvB,aAAD,CAAX;AACA;;AACJ;AACI;AAfR;AAiBH,OApBD;;AAqBA,UAAIvB,OAAO,CAACmB,OAAR,IAAmBtB,QAAQ,CAACP,MAA5B,IAAsCO,QAAQ,CAACN,QAA/C,IAA2DM,QAAQ,CAACL,IAApE,IAA4EK,QAAQ,CAACJ,IAAzF,EAA+F;AAC3Fc,QAAAA,iBAAiB;AACpB;AACJ;AACJ,GAtCQ,EAsCN,CAACP,OAAD,EAAUO,iBAAV,EAA6BV,QAA7B,CAtCM,CAAT;AAuCA,QAAMgC,kBAAkB,GAAGhC,QAAQ,CAACL,IAAT,KAAkB,QAAlB,GAA6BP,gBAA7B,GAAgDC,iBAA3E;AAEA,sBACI,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,kBAAD;AAAoB,IAAA,IAAI,EAAEe,IAA1B;AAAgC,IAAA,OAAO,EAAEC,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAC,WAAnC;AAA+C,IAAA,YAAY,MAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,OAAO,iBACJ,0CACKA,OAAO,CAAC8B,KAAR,CAAcH,GAAd,CAAmBI,CAAD,IAAOA,CAAC,CAACR,KAA3B,EAAkCS,IAAlC,CAAuC,GAAvC,CADL,CAFR,CADJ,CAFJ,eAWI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAa,IAAA,SAAS,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEnC,QAAQ,CAACL,IAAxB;AAA8B,IAAA,QAAQ,EAAG8B,CAAD,IAAOxB,WAAW,CAAC,EACvD,GAAGD,QADoD;AAC1CL,MAAAA,IAAI,EAAE8B,CAAC,CAACW,MAAF,CAASV;AAD2B,KAAD,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJJ,CAFJ,CADJ,CAXJ,eAsBI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAa,IAAA,SAAS,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE1B,QAAQ,CAACN,QAAxB;AAAkC,IAAA,QAAQ,EAAG+B,CAAD,IAAOxB,WAAW,CAAC,EAC3D,GAAGD,QADwD;AAC9CN,MAAAA,QAAQ,EAAE+B,CAAC,CAACW,MAAF,CAASV;AAD2B,KAAD,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKM,kBAAkB,CAACF,GAAnB,CAAwBO,CAAD,iBAAO,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,CAAC,CAAC1C,IAAjB;AAAuB,IAAA,KAAK,EAAE0C,CAAC,CAAC1C,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuC0C,CAAC,CAAC1C,IAAzC,CAA9B,CAHL,CAFJ,CADJ,CAtBJ,eAgCI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,QAAhB;AAAyB,IAAA,KAAK,EAAC,QAA/B;AAAwC,IAAA,SAAS,MAAjD;AAAkD,IAAA,KAAK,EAAEK,QAAQ,CAACP,MAAlE;AAA0E,IAAA,QAAQ,EAAGgC,CAAD,IAAOxB,WAAW,CAAC,EACnG,GAAGD,QADgG;AACtFP,MAAAA,MAAM,EAAEgC,CAAC,CAACW,MAAF,CAASV;AADqE,KAAD,CAAtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAhCJ,eAqCI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,MAAhB;AAAuB,IAAA,KAAK,EAAC,MAA7B;AAAoC,IAAA,SAAS,MAA7C;AAA8C,IAAA,KAAK,EAAE1B,QAAQ,CAACJ,IAA9D;AAAoE,IAAA,QAAQ,EAAG6B,CAAD,IAAOxB,WAAW,CAAC,EAC7F,GAAGD,QAD0F;AAChFJ,MAAAA,IAAI,EAAEV,UAAU,CAACuC,CAAC,CAACW,MAAF,CAASV,KAAV;AADgE,KAAD,CAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CArCJ,EA2CK1B,QAAQ,CAACL,IAAT,KAAkB,SAAlB,iBACG,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,KAAK,EAAC,QAFV;AAGI,IAAA,SAAS,MAHb;AAII,IAAA,KAAK,EAAEW,OAAO,CAACN,QAAQ,CAACN,QAAV,CAJlB;AAKI,IAAA,QAAQ,EAAG+B,CAAD,IACNlB,UAAU,CAAC,EACP,GAAGD,OADI;AAEP,OAACN,QAAQ,CAACN,QAAV,GAAqB+B,CAAC,CAACW,MAAF,CAASV;AAFvB,KAAD,CANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CA5CR,eA2DI,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAE3B,OAAO,CAACuC,MAA3B;AAAmC,IAAA,OAAO,EAAC,UAA3C;AAAsD,IAAA,KAAK,EAAC,SAA5D;AAAsE,IAAA,SAAS,MAA/E;AAAgF,IAAA,OAAO,EAAE5B,iBAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3DJ,CADJ;AA+DH,CAzID;;AA2IA,eAAeZ,IAAf","sourcesContent":["import React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { TextField, Grid, Typography, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core'\nimport { ExpenseTrackerContext } from '../../../context/context'\nimport { v4 as uuidv4 } from 'uuid'\nimport formatDate from '../../../utils/formatDate'\nimport useStyles from './styles'\nimport { incomeCategories, expenseCategories } from '../../../constants/categories'\nimport { useSpeechContext } from '@speechly/react-client'\nimport CustomizedSnackbar from '../../Snackbar/Snackbar';\n\nconst initialState = {\n    amount: '',\n    category: '',\n    type: 'Income',\n    date: formatDate(Date()),\n}\n\nconst Form = () => {\n    const classes = useStyles();\n    const [formData, setFormData] = useState(initialState);\n    const { addTransaction } = useContext(ExpenseTrackerContext);\n    const { segment } = useSpeechContext();\n    const [open, setOpen] = useState(false);\n\n    const [budgets, setBudgets] = useState({\n        // Initialize budgets for each category to zero\n        // Add more categories as needed\n        Food: 0,\n        Rent: 0,\n        // ... other categories\n    });\n\n\n    const createTransaction = useCallback(() => {\n        if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n        const budgetLimit = budgets[formData.category];\n        const transactionAmount = Number(formData.amount);\n\n        if (budgetLimit > 0 && transactionAmount > budgetLimit) {\n            // Show a notification or visual indicator that the budget limit is exceeded\n            console.log('Budget limit exceeded!');\n            return;\n        }\n\n        const transaction = { ...formData, amount: Number(formData.amount), id: uuidv4() };\n\n        setOpen(true);\n        addTransaction(transaction);\n        setFormData((prevFormData) => ({ ...prevFormData, ...initialState }));\n    }, [addTransaction, formData]);\n    useEffect(() => {\n        // console.log(\"Hello\");\n        if (segment) {\n            if (segment.intent.intent === 'add_expense') {\n                setFormData({ ...formData, type: 'Expense' });\n            }\n            else if (segment.intent.intent === 'add_income') {\n                setFormData({ ...formData, type: 'Income' });\n            } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\n                return createTransaction();\n            } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\n                return setFormData(initialState);\n            }\n            segment.entities.forEach((e) => {\n                //  console.log(e.value);\n                const category = `${e.value.charAt(0)}${e.value.slice(1).toLowerCase()}`\n                switch (e.type) {\n                    case 'amount':\n                        setFormData({ ...formData, amount: e.value });\n                        break;\n                    case 'category':\n                        if (incomeCategories.map((ic) => ic.type).includes(category)) {\n                            setFormData({ ...formData, type: 'Income', category });\n                        } else if (expenseCategories.map((ic) => ic.type).includes(category)) {\n                            setFormData({ ...formData, type: 'Expense', category });\n                        }\n                        break;\n                    case 'date':\n                        setFormData({ ...formData, date: e.value });\n                        break;\n                    default:\n                        break;\n                }\n            });\n            if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\n                createTransaction();\n            }\n        }\n    }, [segment, createTransaction, formData])\n    const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n\n    return (\n        <Grid container spacing={2}>\n            <CustomizedSnackbar open={open} setOpen={setOpen} />\n            <Grid item xs={12}>\n                <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\n                    {segment &&\n                        <>\n                            {segment.words.map((w) => w.value).join(\" \")}\n                        </>\n                    }\n                </Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <FormControl fullWidth>\n                    <InputLabel>Type</InputLabel>\n                    <Select value={formData.type} onChange={(e) => setFormData({\n                        ...formData, type: e.target.value\n                    })}>\n                        <MenuItem value=\"Income\">Income</MenuItem>\n                        <MenuItem value=\"Expense\">Expense</MenuItem>\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs={6}>\n                <FormControl fullWidth>\n                    <InputLabel>Category</InputLabel>\n                    <Select value={formData.category} onChange={(e) => setFormData({\n                        ...formData, category: e.target.value\n                    })}>\n                        {selectedCategories.map((c) => <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>)}\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField type=\"number\" label=\"Amount\" fullWidth value={formData.amount} onChange={(e) => setFormData({\n                    ...formData, amount: e.target.value\n                })}></TextField>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField type=\"date\" label=\"Date\" fullWidth value={formData.date} onChange={(e) => setFormData({\n                    ...formData, date: formatDate(e.target.value)\n                })}  ></TextField>\n            </Grid>\n            {/* Step 2: Display Budget Input Fields */}\n            {formData.type === 'Expense' && (\n                <Grid item xs={6}>\n                    <TextField\n                        type=\"number\"\n                        label=\"Budget\"\n                        fullWidth\n                        value={budgets[formData.category]}\n                        onChange={(e) =>\n                            setBudgets({\n                                ...budgets,\n                                [formData.category]: e.target.value,\n                            })\n                        }\n                    />\n                </Grid>\n            )}\n            <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick={createTransaction}>Create</Button>\n        </Grid>\n    )\n}\n\nexport default Form\n"]},"metadata":{},"sourceType":"module"}