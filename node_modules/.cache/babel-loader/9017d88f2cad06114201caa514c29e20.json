{"ast":null,"code":"var _jsxFileName = \"/Users/kashish/Documents/Expense_Tracker_REACT/src/components/Main/Form/Form.jsx\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { TextField, Grid, Typography, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport { ExpenseTrackerContext } from '../../../context/context';\nimport { v4 as uuidv4 } from 'uuid';\nimport formatDate from '../../../utils/formatDate';\nimport useStyles from './styles';\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport { useSpeechContext } from '@speechly/react-client';\nimport CustomizedSnackbar from '../../Snackbar/Snackbar';\nconst initialState = {\n  amount: '',\n  category: '',\n  type: 'Income',\n  date: formatDate(Date())\n};\n\nconst Form = () => {\n  const classes = useStyles();\n  const [formData, setFormData] = useState(initialState);\n  const {\n    addTransaction\n  } = useContext(ExpenseTrackerContext);\n  const {\n    segment\n  } = useSpeechContext();\n  const [open, setOpen] = useState(false);\n\n  const createTransaction = () => {\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n    const transaction = { ...formData,\n      amount: Number(formData.amount),\n      id: uuidv4()\n    };\n    setOpen(true);\n    addTransaction(transaction);\n    setFormData(initialState);\n  };\n\n  useEffect(() => {\n    // console.log(\"Hello\");\n    if (segment) {\n      if (segment.intent.intent === 'add_expense') {\n        setFormData({ ...formData,\n          type: 'Expense'\n        });\n      } else if (segment.intent.intent === 'add_income') {\n        setFormData({ ...formData,\n          type: 'Income'\n        });\n      } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\n        return createTransaction();\n      } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\n        return setFormData(initialState);\n      }\n\n      segment.entities.forEach(e => {\n        //  console.log(e.value);\n        const category = `${e.value.charAt(0)}${e.value.slice(1).toLowerCase()}`;\n\n        switch (e.type) {\n          case 'amount':\n            setFormData({ ...formData,\n              amount: e.value\n            });\n            break;\n\n          case 'category':\n            if (incomeCategories.map(ic => ic.type).includes(category)) {\n              setFormData({ ...formData,\n                type: 'Income',\n                category\n              });\n            } else if (expenseCategories.map(ic => ic.type).includes(category)) {\n              setFormData({ ...formData,\n                type: 'Expense',\n                category\n              });\n            }\n\n            break;\n\n          case 'date':\n            setFormData({ ...formData,\n              date: e.value\n            });\n            break;\n\n          default:\n            break;\n        }\n      });\n\n      if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\n        createTransaction();\n      }\n    }\n  }, [segment, createTransaction, formData]);\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CustomizedSnackbar, {\n    open: open,\n    setOpen: setOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    variant: \"subtitle2\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 16\n    }\n  }, segment && /*#__PURE__*/React.createElement(React.Fragment, null, segment.words.map(w => w.value).join(\" \")))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, \"Type\"), /*#__PURE__*/React.createElement(Select, {\n    value: formData.type,\n    onChange: e => setFormData({ ...formData,\n      type: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Income\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, \"Income\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Expense\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, \"Expense\")))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, \"Category\"), /*#__PURE__*/React.createElement(Select, {\n    value: formData.category,\n    onChange: e => setFormData({ ...formData,\n      category: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, selectedCategories.map(c => /*#__PURE__*/React.createElement(MenuItem, {\n    key: c.type,\n    value: c.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 50\n    }\n  }, c.type))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    type: \"number\",\n    label: \"Amount\",\n    fullWidth: true,\n    value: formData.amount,\n    onChange: e => setFormData({ ...formData,\n      amount: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    type: \"date\",\n    label: \"Date\",\n    fullWidth: true,\n    value: formData.date,\n    onChange: e => setFormData({ ...formData,\n      date: formatDate(e.target.value)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 14\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: classes.button,\n    variant: \"outlined\",\n    color: \"primary\",\n    fullWidth: true,\n    onClick: createTransaction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 14\n    }\n  }, \"Create\"));\n};\n\nexport default Form;","map":{"version":3,"sources":["/Users/kashish/Documents/Expense_Tracker_REACT/src/components/Main/Form/Form.jsx"],"names":["React","useState","useEffect","useContext","TextField","Grid","Typography","Button","FormControl","InputLabel","Select","MenuItem","ExpenseTrackerContext","v4","uuidv4","formatDate","useStyles","incomeCategories","expenseCategories","useSpeechContext","CustomizedSnackbar","initialState","amount","category","type","date","Date","Form","classes","formData","setFormData","addTransaction","segment","open","setOpen","createTransaction","Number","isNaN","includes","transaction","id","intent","isFinal","entities","forEach","e","value","charAt","slice","toLowerCase","map","ic","selectedCategories","words","w","join","target","c","button"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,EAAiCC,UAAjC,QAAkD,OAAlD;AACA,SAAQC,SAAR,EAAkBC,IAAlB,EAAuBC,UAAvB,EAAkCC,MAAlC,EAAyCC,WAAzC,EAAqDC,UAArD,EAAgEC,MAAhE,EAAuEC,QAAvE,QAAsF,mBAAtF;AACA,SAAQC,qBAAR,QAAoC,0BAApC;AACA,SAAQC,EAAE,IAAIC,MAAd,QAA2B,MAA3B;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,SAAP,MAAsB,UAAtB;AACA,SAAQC,gBAAR,EAAyBC,iBAAzB,QAAiD,+BAAjD;AACA,SAAQC,gBAAR,QAA+B,wBAA/B;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AAEA,MAAMC,YAAY,GAAC;AACfC,EAAAA,MAAM,EAAC,EADQ;AAEfC,EAAAA,QAAQ,EAAC,EAFM;AAGfC,EAAAA,IAAI,EAAC,QAHU;AAIfC,EAAAA,IAAI,EAACV,UAAU,CAAEW,IAAI,EAAN;AAJA,CAAnB;;AAOA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAMC,OAAO,GAACZ,SAAS,EAAvB;AACA,QAAM,CAACa,QAAD,EAAUC,WAAV,IAAuB7B,QAAQ,CAACoB,YAAD,CAArC;AACA,QAAM;AAACU,IAAAA;AAAD,MAAiB5B,UAAU,CAACS,qBAAD,CAAjC;AACA,QAAM;AAACoB,IAAAA;AAAD,MAAUb,gBAAgB,EAAhC;AACD,QAAM,CAACc,IAAD,EAAMC,OAAN,IAAejC,QAAQ,CAAC,KAAD,CAA7B;;AAGC,QAAMkC,iBAAiB,GAAC,MAAI;AACxB,QAAGC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACP,QAAQ,CAACP,MAAV,CAAnB,KAAyC,CAACO,QAAQ,CAACJ,IAAT,CAAca,QAAd,CAAuB,GAAvB,CAA7C,EAA2E;AAC3E,UAAMC,WAAW,GAAC,EAAC,GAAGV,QAAJ;AAAaP,MAAAA,MAAM,EAACc,MAAM,CAACP,QAAQ,CAACP,MAAV,CAA1B;AAA4CkB,MAAAA,EAAE,EAAC1B,MAAM;AAArD,KAAlB;AAEAoB,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAH,IAAAA,cAAc,CAACQ,WAAD,CAAd;AACAT,IAAAA,WAAW,CAACT,YAAD,CAAX;AACH,GAPD;;AASAnB,EAAAA,SAAS,CAAC,MAAI;AACT;AACA,QAAG8B,OAAH,EACA;AACI,UAAGA,OAAO,CAACS,MAAR,CAAeA,MAAf,KAAwB,aAA3B,EAAyC;AACrCX,QAAAA,WAAW,CAAC,EAAC,GAAGD,QAAJ;AAAaL,UAAAA,IAAI,EAAC;AAAlB,SAAD,CAAX;AACH,OAFD,MAGK,IAAGQ,OAAO,CAACS,MAAR,CAAeA,MAAf,KAAwB,YAA3B,EAAwC;AAC1CX,QAAAA,WAAW,CAAC,EAAC,GAAGD,QAAJ;AAAaL,UAAAA,IAAI,EAAC;AAAlB,SAAD,CAAX;AACH,OAFK,MAEA,IAAGQ,OAAO,CAACU,OAAR,IAAmBV,OAAO,CAACS,MAAR,CAAeA,MAAf,KAAwB,oBAA9C,EAAmE;AACrE,eAAON,iBAAiB,EAAxB;AACH,OAFK,MAEA,IAAGH,OAAO,CAACU,OAAR,IAAmBV,OAAO,CAACS,MAAR,CAAeA,MAAf,KAAwB,oBAA9C,EAAmE;AACrE,eAAOX,WAAW,CAACT,YAAD,CAAlB;AACH;;AACDW,MAAAA,OAAO,CAACW,QAAR,CAAiBC,OAAjB,CAA0BC,CAAD,IAAK;AAC5B;AACA,cAAMtB,QAAQ,GAAE,GAAEsB,CAAC,CAACC,KAAF,CAAQC,MAAR,CAAe,CAAf,CAAkB,GAAEF,CAAC,CAACC,KAAF,CAAQE,KAAR,CAAc,CAAd,EAAiBC,WAAjB,EAA+B,EAArE;;AACA,gBAAQJ,CAAC,CAACrB,IAAV;AACI,eAAK,QAAL;AACIM,YAAAA,WAAW,CAAC,EAAC,GAAGD,QAAJ;AAAaP,cAAAA,MAAM,EAACuB,CAAC,CAACC;AAAtB,aAAD,CAAX;AACA;;AACJ,eAAK,UAAL;AACI,gBAAG7B,gBAAgB,CAACiC,GAAjB,CAAsBC,EAAD,IAAMA,EAAE,CAAC3B,IAA9B,EAAoCc,QAApC,CAA6Cf,QAA7C,CAAH,EAA0D;AAC1DO,cAAAA,WAAW,CAAC,EAAC,GAAGD,QAAJ;AAAaL,gBAAAA,IAAI,EAAC,QAAlB;AAA2BD,gBAAAA;AAA3B,eAAD,CAAX;AACC,aAFD,MAEM,IAAGL,iBAAiB,CAACgC,GAAlB,CAAuBC,EAAD,IAAMA,EAAE,CAAC3B,IAA/B,EAAqCc,QAArC,CAA8Cf,QAA9C,CAAH,EAA2D;AAC/DO,cAAAA,WAAW,CAAC,EAAC,GAAGD,QAAJ;AAAaL,gBAAAA,IAAI,EAAC,SAAlB;AAA4BD,gBAAAA;AAA5B,eAAD,CAAX;AACD;;AACD;;AACJ,eAAK,MAAL;AACMO,YAAAA,WAAW,CAAC,EAAC,GAAGD,QAAJ;AAAaJ,cAAAA,IAAI,EAACoB,CAAC,CAACC;AAApB,aAAD,CAAX;AACA;;AACN;AACI;AAfR;AAiBD,OApBD;;AAqBA,UAAGd,OAAO,CAACU,OAAR,IAAmBb,QAAQ,CAACP,MAA5B,IAAsCO,QAAQ,CAACN,QAA/C,IAA2DM,QAAQ,CAACL,IAApE,IAA4EK,QAAQ,CAACJ,IAAxF,EAA6F;AACxFU,QAAAA,iBAAiB;AACrB;AACH;AACL,GAvCQ,EAuCP,CAACH,OAAD,EAASG,iBAAT,EAA2BN,QAA3B,CAvCO,CAAT;AAwCA,QAAMuB,kBAAkB,GAACvB,QAAQ,CAACL,IAAT,KAAgB,QAAhB,GAAyBP,gBAAzB,GAA0CC,iBAAnE;AAEA,sBACI,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,kBAAD;AAAoB,IAAA,IAAI,EAAEe,IAA1B;AAAgC,IAAA,OAAO,EAAEC,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEK,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAC,WAAnC;AAA+C,IAAA,YAAY,MAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCF,OAAO,iBACJ,0CACKA,OAAO,CAACqB,KAAR,CAAcH,GAAd,CAAmBI,CAAD,IAAKA,CAAC,CAACR,KAAzB,EAAgCS,IAAhC,CAAqC,GAArC,CADL,CAFJ,CADF,CAFL,eAWK,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,WAAD;AAAa,IAAA,SAAS,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,eAEG,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE1B,QAAQ,CAACL,IAAxB;AAA8B,IAAA,QAAQ,EAAGqB,CAAD,IAAKf,WAAW,CAAC,EACrD,GAAGD,QADkD;AACzCL,MAAAA,IAAI,EAACqB,CAAC,CAACW,MAAF,CAASV;AAD2B,KAAD,CAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGA,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHA,eAIA,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJA,CAFH,CADA,CAXL,eAsBK,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,WAAD;AAAa,IAAA,SAAS,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEjB,QAAQ,CAACN,QAAxB;AAAkC,IAAA,QAAQ,EAAGsB,CAAD,IAAKf,WAAW,CAAC,EACzD,GAAGD,QADsD;AAC7CN,MAAAA,QAAQ,EAACsB,CAAC,CAACW,MAAF,CAASV;AAD2B,KAAD,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGIM,kBAAkB,CAACF,GAAnB,CAAwBO,CAAD,iBAAM,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,CAAC,CAACjC,IAAjB;AAAuB,IAAA,KAAK,EAAEiC,CAAC,CAACjC,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuCiC,CAAC,CAACjC,IAAzC,CAA7B,CAHJ,CAFA,CADH,CAtBL,eAgCK,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,QAAhB;AAAyB,IAAA,KAAK,EAAC,QAA/B;AAAwC,IAAA,SAAS,MAAjD;AAAkD,IAAA,KAAK,EAAEK,QAAQ,CAACP,MAAlE;AAA0E,IAAA,QAAQ,EAAGuB,CAAD,IAAKf,WAAW,CAAC,EACjG,GAAGD,QAD8F;AACrFP,MAAAA,MAAM,EAACuB,CAAC,CAACW,MAAF,CAASV;AADqE,KAAD,CAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CAhCL,eAqCK,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,MAAhB;AAAuB,IAAA,KAAK,EAAC,MAA7B;AAAoC,IAAA,SAAS,MAA7C;AAA8C,IAAA,KAAK,EAAEjB,QAAQ,CAACJ,IAA9D;AAAoE,IAAA,QAAQ,EAAGoB,CAAD,IAAKf,WAAW,CAAC,EAC5F,GAAGD,QADyF;AAChFJ,MAAAA,IAAI,EAACV,UAAU,CAAC8B,CAAC,CAACW,MAAF,CAASV,KAAV;AADiE,KAAD,CAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CArCL,eA0CK,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAElB,OAAO,CAAC8B,MAA3B;AAAmC,IAAA,OAAO,EAAC,UAA3C;AAAsD,IAAA,KAAK,EAAC,SAA5D;AAAsE,IAAA,SAAS,MAA/E;AAAgF,IAAA,OAAO,EAAEvB,iBAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1CL,CADJ;AA8CH,CAzGD;;AA2GA,eAAeR,IAAf","sourcesContent":["import React,{useState,useEffect,useContext} from 'react';\nimport {TextField,Grid,Typography,Button,FormControl,InputLabel,Select,MenuItem} from '@material-ui/core'\nimport {ExpenseTrackerContext} from '../../../context/context'\nimport {v4 as uuidv4} from 'uuid'\nimport formatDate from '../../../utils/formatDate'\nimport useStyles from './styles'\nimport {incomeCategories,expenseCategories} from '../../../constants/categories'\nimport {useSpeechContext} from '@speechly/react-client'\nimport CustomizedSnackbar from '../../Snackbar/Snackbar';\n\nconst initialState={\n    amount:'',\n    category:'',\n    type:'Income',\n    date:formatDate( Date()),\n}\n\nconst Form = () => {\n    const classes=useStyles();\n    const [formData,setFormData]=useState(initialState);\n    const {addTransaction}=useContext(ExpenseTrackerContext);\n    const {segment}=useSpeechContext();\n   const [open,setOpen]=useState(false);\n\n\n    const createTransaction=()=>{\n        if(Number.isNaN(Number(formData.amount)) || !formData.date.includes('-') ) return ;\n        const transaction={...formData,amount:Number(formData.amount),id:uuidv4()}\n        \n        setOpen(true);\n        addTransaction(transaction);\n        setFormData(initialState);\n    }\n\n    useEffect(()=>{\n         // console.log(\"Hello\");\n         if(segment)\n         {\n             if(segment.intent.intent==='add_expense'){\n                 setFormData({...formData,type:'Expense'});\n             }\n             else if(segment.intent.intent==='add_income'){\n                setFormData({...formData,type:'Income'});\n            }else if(segment.isFinal && segment.intent.intent==='create_transaction'){\n                return createTransaction();\n            }else if(segment.isFinal && segment.intent.intent==='cancel_transaction'){\n                return setFormData(initialState);\n            }\n            segment.entities.forEach((e)=>{\n              //  console.log(e.value);\n              const category=`${e.value.charAt(0)}${e.value.slice(1).toLowerCase()}`\n              switch (e.type) {\n                  case 'amount':\n                      setFormData({...formData,amount:e.value});\n                      break;\n                  case 'category':\n                      if(incomeCategories.map((ic)=>ic.type).includes(category)){\n                      setFormData({...formData,type:'Income',category});\n                      }else if(expenseCategories.map((ic)=>ic.type).includes(category)){\n                        setFormData({...formData,type:'Expense',category});\n                      }\n                      break;\n                  case 'date':\n                        setFormData({...formData,date:e.value});\n                        break; \n                  default:\n                      break;\n              }\n            });\n            if(segment.isFinal && formData.amount && formData.category && formData.type && formData.date){\n                 createTransaction();\n            }\n         }\n    },[segment,createTransaction,formData])\n    const selectedCategories=formData.type==='Income'?incomeCategories:expenseCategories;\n\n    return (\n        <Grid container spacing={2}>\n        <CustomizedSnackbar open={open} setOpen={setOpen} />\n             <Grid item xs={12}>\n               <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\n               {segment && \n                   <>\n                       {segment.words.map((w)=>w.value).join(\" \")}\n                   </>\n               }\n               </Typography>\n             </Grid>\n             <Grid item xs={6}>\n             <FormControl fullWidth>\n                <InputLabel>Type</InputLabel>\n                <Select value={formData.type} onChange={(e)=>setFormData({\n                    ...formData,type:e.target.value\n                })}>\n                <MenuItem value=\"Income\">Income</MenuItem>\n                <MenuItem value=\"Expense\">Expense</MenuItem>\n                </Select>\n             </FormControl>\n             </Grid>\n             <Grid item xs={6}>\n                <FormControl fullWidth>\n                <InputLabel>Category</InputLabel>\n                <Select value={formData.category} onChange={(e)=>setFormData({\n                    ...formData,category:e.target.value\n                })}>\n                   {selectedCategories.map((c)=> <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>)}\n                </Select>\n                </FormControl>\n             </Grid>\n             <Grid item xs={6}>\n                <TextField type=\"number\" label=\"Amount\" fullWidth value={formData.amount} onChange={(e)=>setFormData({\n                    ...formData,amount:e.target.value\n                })}></TextField>\n             </Grid>\n             <Grid item xs={6}>\n             <TextField type=\"date\" label=\"Date\" fullWidth value={formData.date} onChange={(e)=>setFormData({\n                ...formData,date:formatDate(e.target.value)  \n            })}  ></TextField>\n             </Grid>\n             <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick={createTransaction}>Create</Button>\n        </Grid>\n    )\n}\n\nexport default Form\n"]},"metadata":{},"sourceType":"module"}